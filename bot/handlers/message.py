from aiogram import Router, types
from aiogram.enums.parse_mode import ParseMode
from bot.states.CreateReview import CreateReview
from aiogram.fsm.context import FSMContext
from bot.states.GameState import Game, GameTranslate as GameTranslates, GameSpeed, GameReverseTranslate
from api.backend.schemas.GamePDSchema import GameTranslate as gm_t
from bot.filters.IsLanguage import IsLanguageFilter, IsGameModeFilter
from bot.key.reply_kb import btn_for_game
from bot.key.inln_kb import generate_btn_for_game_translate, delete_profile_btn
from bot.filters.DeletePrifle import DeleteProfile
from bot.req_api.game_api import GameAPI
from bot.req_api.game_set import gts, gss
from bot.req_api.user_set import user_auth_set
from bot.req_api.user_api import UserApi
from bot.req_api.history_api import HistoryApi, AddNewHistoryPDSchema
from bot.req_api.review_api import ReviewAPI
from bot.states.UserProfileStates import ChangeUserName, ChangeUserPhoto
from random import randrange
from datetime import datetime


game = GameAPI()
message_router: Router = Router()


@message_router.callback_query(lambda message: message.data.endswith("ed"))
async def speed_game_continue(clb: types.CallbackQuery, state: FSMContext) -> None:
    if "yes" in clb.data:
        game_r = await game.get_words()
        game_state_translate = gm_t(
            secret_word=game_r.secret_word,
            translate_in_russo=game_r.translate_in_russo
        )

        await clb.message.answer(f"–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: <b>{game_state_translate.secret_word}</b>\n\n–í—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥: <b>5</b> —Å–µ–∫—É–Ω–¥", parse_mode=ParseMode.HTML)
        gss.game_time = datetime.now()
        await state.set_state(GameSpeed.word_translate)
    else:
        await gss.procent_game_r()
        await clb.message.delete()
        await clb.message.answer(text="–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞..")
        await HistoryApi().create_history(
            new_history=AddNewHistoryPDSchema(
                score=gss.score,
                right_word=gss.right_word,
                lose_word=gss.lose_word,
                procent_game=gss.procent_game,
                token=user_auth_set.token
            )
        )
        await state.clear() 


@message_router.callback_query(lambda message: message.data.endswith("rt"))
async def choice_user_continue(clb: types.CallbackQuery, state: FSMContext) -> None:
    if "yes" in clb.data:
        game_r = await game.get_words()
        await clb.message.answer(f"–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: <b>{gts.translate_word}</b>", parse_mode=ParseMode.HTML)
        await state.set_state(GameReverseTranslate.word_translate)
    else:
        await gss.procent_game_r()
        await clb.message.delete()
        await clb.message.answer(text="üõë –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞..")
        await HistoryApi().create_history(
            new_history=AddNewHistoryPDSchema(
                score=gss.score,
                right_word=gss.right_word,
                lose_word=gss.lose_word,
                procent_game=gss.procent_game,
                token=user_auth_set.token
            )
        )
        await state.clear()    


@message_router.callback_query(lambda message: message.data.endswith("gyp"))
async def choice_user_continue(clb: types.CallbackQuery, state: FSMContext) -> None:
    if "yes" in clb.data:
        game_r = await game.get_words()
        await clb.message.answer(f"–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: <b>{gts.word}</b>", parse_mode=ParseMode.HTML)
        await state.set_state(GameTranslates.word_translate)
    else:
        await gss.procent_game_r()
        await clb.message.delete()
        await clb.message.answer(text="üõë –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞..")
        await HistoryApi().create_history(
            new_history=AddNewHistoryPDSchema(
                score=gss.score,
                right_word=gss.right_word,
                lose_word=gss.lose_word,
                procent_game=gss.procent_game,
                token=user_auth_set.token
            )
        )
        await state.clear()    


@message_router.callback_query(lambda message: message.data.endswith("profbtn"))
async def chice_profile_btn(
    clb: types.CallbackQuery,
    state: FSMContext
) -> None:
    if clb.data == "my_history_profbtn":
        all_my_histories: list = await HistoryApi().get_my_histories()

        count_history = 0
        if all_my_histories:
            for history in all_my_histories:
                # await clb.message.answer(
                #     text=f"–ò—Å—Ç–æ—Ä–∏—è <b>‚Ññ{count_history}</b>\n\nüëë –°—á–µ—Ç: {history.get('score')}\n‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤: {history.get('right_word')}\n‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤: {history.get('lose_word')}\nüìù –ö–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏: {history.get('procent_game')}",
                #     parse_mode=ParseMode.HTML
                # )
                count_history += 1
            await clb.message.answer(text=f"üìö –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö –∏—Å—Ç–æ—Ä–∏–π –∏–≥—Ä: {count_history}")
        else:
            await clb.message.answer(
                text="–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—è üìå, –Ω—É–∂–Ω–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!"
            )
    elif clb.data == "change_username_profbtn":
        await clb.answer("üí° –í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
        await clb.message.answer("‚úè –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–Ω–æ–≤–æ–µ –∏–º—è:</b> ", parse_mode=ParseMode.HTML)
        await state.set_state(ChangeUserName.user_name)   

    elif clb.data == "delete_me_profbtn":
        await clb.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é <b>–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</b> üóë, –≤—ã —É–≤–µ—Ä–µ–Ω—ã?",
                                 parse_mode=ParseMode.HTML,
                                 reply_markup=await delete_profile_btn())
    
    elif clb.data == "stats_profbtn":
        await clb.answer("üí° –í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é –º–∏—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        all_stats_user: list = await GameAPI().get_stats()

        if all_stats_user:
            text_top_list: str = ""
            count_stats: int = 1
            for usr in all_stats_user[:7]:
                text_top_list += f"–ú–µ—Å—Ç–æ <b><i>#{count_stats}</i></b>\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {usr.get('user_name')}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤: {usr.get('score')}\n\n"
                count_stats += 1

            await clb.message.answer(text="üìä –ú–∏—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: \n\n"+text_top_list, parse_mode=ParseMode.HTML)
        else:
            await clb.message.answer(text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –º–∏—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞...\n–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–Ω—è—Ç—å —Å–≤–æ–π —Ç–æ–ø!")
    elif clb.data == "change_photo_profbtn":
        await clb.answer("üí° –í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é, –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ")
        await clb.message.answer("üì∑ –ñ–¥—É –≤–∞—à—É –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é..")
        await state.set_state(ChangeUserPhoto.photo)
    elif clb.data == "my_review_profbtn":

        all_review: list = dict(await UserApi().get_full_user_info()).get("reviews")
        await clb.message.answer(text=f"üìö –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {len(all_review)}")


@message_router.callback_query(IsLanguageFilter())
async def language_sel(message: types.CallbackQuery, state: FSMContext) -> None:
    """
    Choice game mode
    """

    country_name: str = ""
    match message.data:
        case "game_spain_gmt":
            country_name = "es"
        case "game_england_gmt":
            country_name = "en"
        case "game_germany_gmt":
            country_name = "de"
        case "game_franch_gmt":
            country_name = "fr"
        case "game_japanese_gmt":
            country_name = "ja"
        case "game_finnish_gmt":
            country_name = "fi"
        case "game_norway_gmt":
            country_name = "de"

    #Set country name
    game.code = country_name
    await state.update_data(language=country_name)
    await state.set_state(Game.game_mode)
    await message.message.answer(
        text=f"–û—Ç–ª–∏—á–Ω–æ –±—ã–ª –≤—ã–±—Ä–∞–Ω <b>{country_name}</b> —è–∑—ã–∫ üè≥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã...",
        parse_mode=ParseMode.HTML,
        reply_markup=(await btn_for_game()).as_markup()
        )


@message_router.message(IsGameModeFilter())
async def game_mode(message: types.Message, state: FSMContext) -> None:
    """
    Choice game mode
    """

    game_mode_name: str = ""

    match message.text:
        case "üëë –ú–∞—Å—Ç–µ—Ä –ø–µ—Ä–µ–≤–æ–¥–∞":
            game_mode_name = "translate"
        case "üìù –°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –±—É–∫–≤–∞—Ä—å":
            game_mode_name = "speed_translate"
        case "üí° –û–±—Ä–∞—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥":
            game_mode_name = "reverse_translate"

    await message.answer(text=f"<b>–û—Ç–ª–∏—á–Ω–æ</b>, –∏–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è ‚è± {message.from_user.first_name}", reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)


    if game_mode_name == "translate":
        game_r = await game.get_words()
        game_state_translate = gm_t(
            secret_word=game_r.secret_word,
            translate_in_russo=game_r.translate_in_russo
        )

        await message.answer(f"üì¶ –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: <b>{game_state_translate.secret_word}</b>", parse_mode=ParseMode.HTML)
        await state.set_state(GameTranslates.word_translate)
    elif game_mode_name == "speed_translate":
        game_r = await game.get_words()
        game_state_translate = gm_t(
            secret_word=game_r.secret_word,
            translate_in_russo=game_r.translate_in_russo
        )

        await message.answer(f"üì¶ –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: <b>{game_state_translate.secret_word}</b>\n\n–í—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥: <b>5</b> —Å–µ–∫—É–Ω–¥", parse_mode=ParseMode.HTML)
        gss.game_time = datetime.now()
        await state.set_state(GameSpeed.word_translate)

    elif game_mode_name == "reverse_translate":
        game_r = await game.get_words()
        game_state_translate = gm_t(
            secret_word=game_r.secret_word,
            translate_in_russo=game_r.translate_in_russo
        )

        await message.answer(f"üì¶ –°–ª–æ–≤–æ: {game_r.translate_in_russo}, –ø–µ—Ä–µ–≤–µ–¥–∏ –µ–≥–æ..")
        await state.set_state(GameReverseTranslate.word_translate)


@message_router.callback_query(DeleteProfile())
async def delete_profile_user(clb: types.CallbackQuery):
    """
        Delete profile
    """

    if clb.data == "yes_del":
        await clb.message.delete()
        req_del: bool = await UserApi().delete_profile()

        if req_del:
            await clb.answer(text="‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É–¥–∞–ª—ë–Ω")
        else:
            await clb.answer(text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
    else:
        await clb.message.delete()
        await clb.answer(text="‚ùó –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")


@message_router.message()
async def all_other_message(message: types.Message) -> None:
    """
    Proccessing other message from user
    """

    await message.answer(text="‚ôæ –ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à <i>–∑–∞–ø—Ä–æ—Å</i>", parse_mode=ParseMode.HTML)